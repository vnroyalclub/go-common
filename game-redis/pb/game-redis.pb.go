// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game-redis.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrCode int32

const (
	ErrCode_Sucess ErrCode = 0
	ErrCode_Failed ErrCode = 1
)

var ErrCode_name = map[int32]string{
	0: "Sucess",
	1: "Failed",
}

var ErrCode_value = map[string]int32{
	"Sucess": 0,
	"Failed": 1,
}

func (x ErrCode) String() string {
	return proto.EnumName(ErrCode_name, int32(x))
}

func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{0}
}

type DataType int32

const (
	DataType_Invalie DataType = 0
	DataType_String  DataType = 1
	DataType_Hash    DataType = 2
	DataType_List    DataType = 3
	DataType_Set     DataType = 4
	DataType_Zset    DataType = 5
)

var DataType_name = map[int32]string{
	0: "Invalie",
	1: "String",
	2: "Hash",
	3: "List",
	4: "Set",
	5: "Zset",
}

var DataType_value = map[string]int32{
	"Invalie": 0,
	"String":  1,
	"Hash":    2,
	"List":    3,
	"Set":     4,
	"Zset":    5,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{1}
}

type ErrMsg struct {
	ErrCode              ErrCode  `protobuf:"varint,1,opt,name=ErrCode,proto3,enum=pb.ErrCode" json:"ErrCode,omitempty"`
	ErrMsg               string   `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrMsg) Reset()         { *m = ErrMsg{} }
func (m *ErrMsg) String() string { return proto.CompactTextString(m) }
func (*ErrMsg) ProtoMessage()    {}
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{0}
}

func (m *ErrMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrMsg.Unmarshal(m, b)
}
func (m *ErrMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrMsg.Marshal(b, m, deterministic)
}
func (m *ErrMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrMsg.Merge(m, src)
}
func (m *ErrMsg) XXX_Size() int {
	return xxx_messageInfo_ErrMsg.Size(m)
}
func (m *ErrMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrMsg proto.InternalMessageInfo

func (m *ErrMsg) GetErrCode() ErrCode {
	if m != nil {
		return m.ErrCode
	}
	return ErrCode_Sucess
}

func (m *ErrMsg) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type Key struct {
	GameId               int32    `protobuf:"varint,1,opt,name=GameId,proto3" json:"GameId,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{1}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetGameId() int32 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

//删除key
type DelRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Type                 DataType `protobuf:"varint,2,opt,name=Type,proto3,enum=pb.DataType" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelRequest) Reset()         { *m = DelRequest{} }
func (m *DelRequest) String() string { return proto.CompactTextString(m) }
func (*DelRequest) ProtoMessage()    {}
func (*DelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{2}
}

func (m *DelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelRequest.Unmarshal(m, b)
}
func (m *DelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelRequest.Marshal(b, m, deterministic)
}
func (m *DelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelRequest.Merge(m, src)
}
func (m *DelRequest) XXX_Size() int {
	return xxx_messageInfo_DelRequest.Size(m)
}
func (m *DelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelRequest proto.InternalMessageInfo

func (m *DelRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DelRequest) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_Invalie
}

//查询key是否存在
type ExistRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Type                 DataType `protobuf:"varint,2,opt,name=Type,proto3,enum=pb.DataType" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistRequest) Reset()         { *m = ExistRequest{} }
func (m *ExistRequest) String() string { return proto.CompactTextString(m) }
func (*ExistRequest) ProtoMessage()    {}
func (*ExistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{3}
}

func (m *ExistRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistRequest.Unmarshal(m, b)
}
func (m *ExistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistRequest.Marshal(b, m, deterministic)
}
func (m *ExistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistRequest.Merge(m, src)
}
func (m *ExistRequest) XXX_Size() int {
	return xxx_messageInfo_ExistRequest.Size(m)
}
func (m *ExistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExistRequest proto.InternalMessageInfo

func (m *ExistRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ExistRequest) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_Invalie
}

type ExistsReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Exist                bool     `protobuf:"varint,2,opt,name=Exist,proto3" json:"Exist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExistsReply) Reset()         { *m = ExistsReply{} }
func (m *ExistsReply) String() string { return proto.CompactTextString(m) }
func (*ExistsReply) ProtoMessage()    {}
func (*ExistsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{4}
}

func (m *ExistsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExistsReply.Unmarshal(m, b)
}
func (m *ExistsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExistsReply.Marshal(b, m, deterministic)
}
func (m *ExistsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExistsReply.Merge(m, src)
}
func (m *ExistsReply) XXX_Size() int {
	return xxx_messageInfo_ExistsReply.Size(m)
}
func (m *ExistsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ExistsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ExistsReply proto.InternalMessageInfo

func (m *ExistsReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *ExistsReply) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

//设置k超时
type ExpireRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Type                 DataType `protobuf:"varint,2,opt,name=Type,proto3,enum=pb.DataType" json:"Type,omitempty"`
	Second               int64    `protobuf:"varint,3,opt,name=Second,proto3" json:"Second,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExpireRequest) Reset()         { *m = ExpireRequest{} }
func (m *ExpireRequest) String() string { return proto.CompactTextString(m) }
func (*ExpireRequest) ProtoMessage()    {}
func (*ExpireRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{5}
}

func (m *ExpireRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExpireRequest.Unmarshal(m, b)
}
func (m *ExpireRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExpireRequest.Marshal(b, m, deterministic)
}
func (m *ExpireRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpireRequest.Merge(m, src)
}
func (m *ExpireRequest) XXX_Size() int {
	return xxx_messageInfo_ExpireRequest.Size(m)
}
func (m *ExpireRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpireRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExpireRequest proto.InternalMessageInfo

func (m *ExpireRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ExpireRequest) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_Invalie
}

func (m *ExpireRequest) GetSecond() int64 {
	if m != nil {
		return m.Second
	}
	return 0
}

//设置字符串请求
type SetRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}
func (*SetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{6}
}

func (m *SetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetRequest.Unmarshal(m, b)
}
func (m *SetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetRequest.Marshal(b, m, deterministic)
}
func (m *SetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetRequest.Merge(m, src)
}
func (m *SetRequest) XXX_Size() int {
	return xxx_messageInfo_SetRequest.Size(m)
}
func (m *SetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetRequest proto.InternalMessageInfo

func (m *SetRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SetRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//设置字符串请求
type GetReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReply) Reset()         { *m = GetReply{} }
func (m *GetReply) String() string { return proto.CompactTextString(m) }
func (*GetReply) ProtoMessage()    {}
func (*GetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{7}
}

func (m *GetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReply.Unmarshal(m, b)
}
func (m *GetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReply.Marshal(b, m, deterministic)
}
func (m *GetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReply.Merge(m, src)
}
func (m *GetReply) XXX_Size() int {
	return xxx_messageInfo_GetReply.Size(m)
}
func (m *GetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetReply proto.InternalMessageInfo

func (m *GetReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *GetReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//hash批量设置
type HmSetRequest struct {
	Key                  *Key              `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	FieldValues          map[string]string `protobuf:"bytes,2,rep,name=FieldValues,proto3" json:"FieldValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HmSetRequest) Reset()         { *m = HmSetRequest{} }
func (m *HmSetRequest) String() string { return proto.CompactTextString(m) }
func (*HmSetRequest) ProtoMessage()    {}
func (*HmSetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{8}
}

func (m *HmSetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HmSetRequest.Unmarshal(m, b)
}
func (m *HmSetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HmSetRequest.Marshal(b, m, deterministic)
}
func (m *HmSetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HmSetRequest.Merge(m, src)
}
func (m *HmSetRequest) XXX_Size() int {
	return xxx_messageInfo_HmSetRequest.Size(m)
}
func (m *HmSetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HmSetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HmSetRequest proto.InternalMessageInfo

func (m *HmSetRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HmSetRequest) GetFieldValues() map[string]string {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

//hash批量查询
type HmGetRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Fields               []string `protobuf:"bytes,2,rep,name=Fields,proto3" json:"Fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HmGetRequest) Reset()         { *m = HmGetRequest{} }
func (m *HmGetRequest) String() string { return proto.CompactTextString(m) }
func (*HmGetRequest) ProtoMessage()    {}
func (*HmGetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{9}
}

func (m *HmGetRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HmGetRequest.Unmarshal(m, b)
}
func (m *HmGetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HmGetRequest.Marshal(b, m, deterministic)
}
func (m *HmGetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HmGetRequest.Merge(m, src)
}
func (m *HmGetRequest) XXX_Size() int {
	return xxx_messageInfo_HmGetRequest.Size(m)
}
func (m *HmGetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HmGetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HmGetRequest proto.InternalMessageInfo

func (m *HmGetRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HmGetRequest) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

//hash批量查询
type HmGetReply struct {
	ErrMsg               *ErrMsg           `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	FieldValues          map[string]string `protobuf:"bytes,2,rep,name=FieldValues,proto3" json:"FieldValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HmGetReply) Reset()         { *m = HmGetReply{} }
func (m *HmGetReply) String() string { return proto.CompactTextString(m) }
func (*HmGetReply) ProtoMessage()    {}
func (*HmGetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{10}
}

func (m *HmGetReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HmGetReply.Unmarshal(m, b)
}
func (m *HmGetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HmGetReply.Marshal(b, m, deterministic)
}
func (m *HmGetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HmGetReply.Merge(m, src)
}
func (m *HmGetReply) XXX_Size() int {
	return xxx_messageInfo_HmGetReply.Size(m)
}
func (m *HmGetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HmGetReply.DiscardUnknown(m)
}

var xxx_messageInfo_HmGetReply proto.InternalMessageInfo

func (m *HmGetReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *HmGetReply) GetFieldValues() map[string]string {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

//hash查询所有返回
type HGetAllReply struct {
	ErrMsg               *ErrMsg           `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	FieldValues          map[string]string `protobuf:"bytes,2,rep,name=FieldValues,proto3" json:"FieldValues,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *HGetAllReply) Reset()         { *m = HGetAllReply{} }
func (m *HGetAllReply) String() string { return proto.CompactTextString(m) }
func (*HGetAllReply) ProtoMessage()    {}
func (*HGetAllReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{11}
}

func (m *HGetAllReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HGetAllReply.Unmarshal(m, b)
}
func (m *HGetAllReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HGetAllReply.Marshal(b, m, deterministic)
}
func (m *HGetAllReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HGetAllReply.Merge(m, src)
}
func (m *HGetAllReply) XXX_Size() int {
	return xxx_messageInfo_HGetAllReply.Size(m)
}
func (m *HGetAllReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HGetAllReply.DiscardUnknown(m)
}

var xxx_messageInfo_HGetAllReply proto.InternalMessageInfo

func (m *HGetAllReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *HGetAllReply) GetFieldValues() map[string]string {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

//hash自增
type HincrbyRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=Field,proto3" json:"Field,omitempty"`
	Value                int64    `protobuf:"varint,3,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HincrbyRequest) Reset()         { *m = HincrbyRequest{} }
func (m *HincrbyRequest) String() string { return proto.CompactTextString(m) }
func (*HincrbyRequest) ProtoMessage()    {}
func (*HincrbyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{12}
}

func (m *HincrbyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HincrbyRequest.Unmarshal(m, b)
}
func (m *HincrbyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HincrbyRequest.Marshal(b, m, deterministic)
}
func (m *HincrbyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HincrbyRequest.Merge(m, src)
}
func (m *HincrbyRequest) XXX_Size() int {
	return xxx_messageInfo_HincrbyRequest.Size(m)
}
func (m *HincrbyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HincrbyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HincrbyRequest proto.InternalMessageInfo

func (m *HincrbyRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HincrbyRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *HincrbyRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

//hash自增结果
type HincrbyReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Value                int64    `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HincrbyReply) Reset()         { *m = HincrbyReply{} }
func (m *HincrbyReply) String() string { return proto.CompactTextString(m) }
func (*HincrbyReply) ProtoMessage()    {}
func (*HincrbyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{13}
}

func (m *HincrbyReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HincrbyReply.Unmarshal(m, b)
}
func (m *HincrbyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HincrbyReply.Marshal(b, m, deterministic)
}
func (m *HincrbyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HincrbyReply.Merge(m, src)
}
func (m *HincrbyReply) XXX_Size() int {
	return xxx_messageInfo_HincrbyReply.Size(m)
}
func (m *HincrbyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HincrbyReply.DiscardUnknown(m)
}

var xxx_messageInfo_HincrbyReply proto.InternalMessageInfo

func (m *HincrbyReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *HincrbyReply) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

//hash删除指定的
type HdelRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Fields               []string `protobuf:"bytes,2,rep,name=Fields,proto3" json:"Fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HdelRequest) Reset()         { *m = HdelRequest{} }
func (m *HdelRequest) String() string { return proto.CompactTextString(m) }
func (*HdelRequest) ProtoMessage()    {}
func (*HdelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{14}
}

func (m *HdelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HdelRequest.Unmarshal(m, b)
}
func (m *HdelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HdelRequest.Marshal(b, m, deterministic)
}
func (m *HdelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HdelRequest.Merge(m, src)
}
func (m *HdelRequest) XXX_Size() int {
	return xxx_messageInfo_HdelRequest.Size(m)
}
func (m *HdelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HdelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HdelRequest proto.InternalMessageInfo

func (m *HdelRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HdelRequest) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

//hash是否存在指定的field
type HExistsRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=Field,proto3" json:"Field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HExistsRequest) Reset()         { *m = HExistsRequest{} }
func (m *HExistsRequest) String() string { return proto.CompactTextString(m) }
func (*HExistsRequest) ProtoMessage()    {}
func (*HExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{15}
}

func (m *HExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HExistsRequest.Unmarshal(m, b)
}
func (m *HExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HExistsRequest.Marshal(b, m, deterministic)
}
func (m *HExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HExistsRequest.Merge(m, src)
}
func (m *HExistsRequest) XXX_Size() int {
	return xxx_messageInfo_HExistsRequest.Size(m)
}
func (m *HExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HExistsRequest proto.InternalMessageInfo

func (m *HExistsRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *HExistsRequest) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type HExistsReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Exist                bool     `protobuf:"varint,2,opt,name=Exist,proto3" json:"Exist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HExistsReply) Reset()         { *m = HExistsReply{} }
func (m *HExistsReply) String() string { return proto.CompactTextString(m) }
func (*HExistsReply) ProtoMessage()    {}
func (*HExistsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{16}
}

func (m *HExistsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HExistsReply.Unmarshal(m, b)
}
func (m *HExistsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HExistsReply.Marshal(b, m, deterministic)
}
func (m *HExistsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HExistsReply.Merge(m, src)
}
func (m *HExistsReply) XXX_Size() int {
	return xxx_messageInfo_HExistsReply.Size(m)
}
func (m *HExistsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HExistsReply.DiscardUnknown(m)
}

var xxx_messageInfo_HExistsReply proto.InternalMessageInfo

func (m *HExistsReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *HExistsReply) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

//左进，表头插入
type LPushRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                []string `protobuf:"bytes,2,rep,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LPushRequest) Reset()         { *m = LPushRequest{} }
func (m *LPushRequest) String() string { return proto.CompactTextString(m) }
func (*LPushRequest) ProtoMessage()    {}
func (*LPushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{17}
}

func (m *LPushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LPushRequest.Unmarshal(m, b)
}
func (m *LPushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LPushRequest.Marshal(b, m, deterministic)
}
func (m *LPushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LPushRequest.Merge(m, src)
}
func (m *LPushRequest) XXX_Size() int {
	return xxx_messageInfo_LPushRequest.Size(m)
}
func (m *LPushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LPushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LPushRequest proto.InternalMessageInfo

func (m *LPushRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LPushRequest) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

//右进，表尾插入
type RPushRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Value                []string `protobuf:"bytes,2,rep,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPushRequest) Reset()         { *m = RPushRequest{} }
func (m *RPushRequest) String() string { return proto.CompactTextString(m) }
func (*RPushRequest) ProtoMessage()    {}
func (*RPushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{18}
}

func (m *RPushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPushRequest.Unmarshal(m, b)
}
func (m *RPushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPushRequest.Marshal(b, m, deterministic)
}
func (m *RPushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPushRequest.Merge(m, src)
}
func (m *RPushRequest) XXX_Size() int {
	return xxx_messageInfo_RPushRequest.Size(m)
}
func (m *RPushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RPushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RPushRequest proto.InternalMessageInfo

func (m *RPushRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RPushRequest) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

//获取指定指定Index范围数据
// 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。
// 也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素
type LrangeRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	End                  int64    `protobuf:"varint,3,opt,name=End,proto3" json:"End,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LrangeRequest) Reset()         { *m = LrangeRequest{} }
func (m *LrangeRequest) String() string { return proto.CompactTextString(m) }
func (*LrangeRequest) ProtoMessage()    {}
func (*LrangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{19}
}

func (m *LrangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LrangeRequest.Unmarshal(m, b)
}
func (m *LrangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LrangeRequest.Marshal(b, m, deterministic)
}
func (m *LrangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LrangeRequest.Merge(m, src)
}
func (m *LrangeRequest) XXX_Size() int {
	return xxx_messageInfo_LrangeRequest.Size(m)
}
func (m *LrangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LrangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LrangeRequest proto.InternalMessageInfo

func (m *LrangeRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LrangeRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *LrangeRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type LLpopReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LLpopReply) Reset()         { *m = LLpopReply{} }
func (m *LLpopReply) String() string { return proto.CompactTextString(m) }
func (*LLpopReply) ProtoMessage()    {}
func (*LLpopReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{20}
}

func (m *LLpopReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LLpopReply.Unmarshal(m, b)
}
func (m *LLpopReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LLpopReply.Marshal(b, m, deterministic)
}
func (m *LLpopReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LLpopReply.Merge(m, src)
}
func (m *LLpopReply) XXX_Size() int {
	return xxx_messageInfo_LLpopReply.Size(m)
}
func (m *LLpopReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LLpopReply.DiscardUnknown(m)
}

var xxx_messageInfo_LLpopReply proto.InternalMessageInfo

func (m *LLpopReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *LLpopReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type LRpopReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LRpopReply) Reset()         { *m = LRpopReply{} }
func (m *LRpopReply) String() string { return proto.CompactTextString(m) }
func (*LRpopReply) ProtoMessage()    {}
func (*LRpopReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{21}
}

func (m *LRpopReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LRpopReply.Unmarshal(m, b)
}
func (m *LRpopReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LRpopReply.Marshal(b, m, deterministic)
}
func (m *LRpopReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LRpopReply.Merge(m, src)
}
func (m *LRpopReply) XXX_Size() int {
	return xxx_messageInfo_LRpopReply.Size(m)
}
func (m *LRpopReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LRpopReply.DiscardUnknown(m)
}

var xxx_messageInfo_LRpopReply proto.InternalMessageInfo

func (m *LRpopReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *LRpopReply) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type LlenReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Len                  int64    `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LlenReply) Reset()         { *m = LlenReply{} }
func (m *LlenReply) String() string { return proto.CompactTextString(m) }
func (*LlenReply) ProtoMessage()    {}
func (*LlenReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{22}
}

func (m *LlenReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LlenReply.Unmarshal(m, b)
}
func (m *LlenReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LlenReply.Marshal(b, m, deterministic)
}
func (m *LlenReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LlenReply.Merge(m, src)
}
func (m *LlenReply) XXX_Size() int {
	return xxx_messageInfo_LlenReply.Size(m)
}
func (m *LlenReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LlenReply.DiscardUnknown(m)
}

var xxx_messageInfo_LlenReply proto.InternalMessageInfo

func (m *LlenReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *LlenReply) GetLen() int64 {
	if m != nil {
		return m.Len
	}
	return 0
}

//
type LrangeReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Values               []string `protobuf:"bytes,2,rep,name=Values,proto3" json:"Values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LrangeReply) Reset()         { *m = LrangeReply{} }
func (m *LrangeReply) String() string { return proto.CompactTextString(m) }
func (*LrangeReply) ProtoMessage()    {}
func (*LrangeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{23}
}

func (m *LrangeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LrangeReply.Unmarshal(m, b)
}
func (m *LrangeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LrangeReply.Marshal(b, m, deterministic)
}
func (m *LrangeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LrangeReply.Merge(m, src)
}
func (m *LrangeReply) XXX_Size() int {
	return xxx_messageInfo_LrangeReply.Size(m)
}
func (m *LrangeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LrangeReply.DiscardUnknown(m)
}

var xxx_messageInfo_LrangeReply proto.InternalMessageInfo

func (m *LrangeReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *LrangeReply) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

//set 添加成员
type SaddRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Members              []string `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaddRequest) Reset()         { *m = SaddRequest{} }
func (m *SaddRequest) String() string { return proto.CompactTextString(m) }
func (*SaddRequest) ProtoMessage()    {}
func (*SaddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{24}
}

func (m *SaddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaddRequest.Unmarshal(m, b)
}
func (m *SaddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaddRequest.Marshal(b, m, deterministic)
}
func (m *SaddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaddRequest.Merge(m, src)
}
func (m *SaddRequest) XXX_Size() int {
	return xxx_messageInfo_SaddRequest.Size(m)
}
func (m *SaddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaddRequest proto.InternalMessageInfo

func (m *SaddRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SaddRequest) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

//set 移除成员
type SremRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Members              []string `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SremRequest) Reset()         { *m = SremRequest{} }
func (m *SremRequest) String() string { return proto.CompactTextString(m) }
func (*SremRequest) ProtoMessage()    {}
func (*SremRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{25}
}

func (m *SremRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SremRequest.Unmarshal(m, b)
}
func (m *SremRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SremRequest.Marshal(b, m, deterministic)
}
func (m *SremRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SremRequest.Merge(m, src)
}
func (m *SremRequest) XXX_Size() int {
	return xxx_messageInfo_SremRequest.Size(m)
}
func (m *SremRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SremRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SremRequest proto.InternalMessageInfo

func (m *SremRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SremRequest) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

//set 判断是否存在成员
type SisMemberRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Member               string   `protobuf:"bytes,2,opt,name=Member,proto3" json:"Member,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SisMemberRequest) Reset()         { *m = SisMemberRequest{} }
func (m *SisMemberRequest) String() string { return proto.CompactTextString(m) }
func (*SisMemberRequest) ProtoMessage()    {}
func (*SisMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{26}
}

func (m *SisMemberRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SisMemberRequest.Unmarshal(m, b)
}
func (m *SisMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SisMemberRequest.Marshal(b, m, deterministic)
}
func (m *SisMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SisMemberRequest.Merge(m, src)
}
func (m *SisMemberRequest) XXX_Size() int {
	return xxx_messageInfo_SisMemberRequest.Size(m)
}
func (m *SisMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SisMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SisMemberRequest proto.InternalMessageInfo

func (m *SisMemberRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *SisMemberRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

//set 判断是否存在成员
type SisMemberReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Exist                bool     `protobuf:"varint,2,opt,name=Exist,proto3" json:"Exist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SisMemberReply) Reset()         { *m = SisMemberReply{} }
func (m *SisMemberReply) String() string { return proto.CompactTextString(m) }
func (*SisMemberReply) ProtoMessage()    {}
func (*SisMemberReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{27}
}

func (m *SisMemberReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SisMemberReply.Unmarshal(m, b)
}
func (m *SisMemberReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SisMemberReply.Marshal(b, m, deterministic)
}
func (m *SisMemberReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SisMemberReply.Merge(m, src)
}
func (m *SisMemberReply) XXX_Size() int {
	return xxx_messageInfo_SisMemberReply.Size(m)
}
func (m *SisMemberReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SisMemberReply.DiscardUnknown(m)
}

var xxx_messageInfo_SisMemberReply proto.InternalMessageInfo

func (m *SisMemberReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *SisMemberReply) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

//set 所有成员信息返回
type SmembersReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Members              []string `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmembersReply) Reset()         { *m = SmembersReply{} }
func (m *SmembersReply) String() string { return proto.CompactTextString(m) }
func (*SmembersReply) ProtoMessage()    {}
func (*SmembersReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{28}
}

func (m *SmembersReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmembersReply.Unmarshal(m, b)
}
func (m *SmembersReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmembersReply.Marshal(b, m, deterministic)
}
func (m *SmembersReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmembersReply.Merge(m, src)
}
func (m *SmembersReply) XXX_Size() int {
	return xxx_messageInfo_SmembersReply.Size(m)
}
func (m *SmembersReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SmembersReply.DiscardUnknown(m)
}

var xxx_messageInfo_SmembersReply proto.InternalMessageInfo

func (m *SmembersReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *SmembersReply) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

type MemberScore struct {
	Member               string   `protobuf:"bytes,1,opt,name=Member,proto3" json:"Member,omitempty"`
	Score                float32  `protobuf:"fixed32,2,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemberScore) Reset()         { *m = MemberScore{} }
func (m *MemberScore) String() string { return proto.CompactTextString(m) }
func (*MemberScore) ProtoMessage()    {}
func (*MemberScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{29}
}

func (m *MemberScore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberScore.Unmarshal(m, b)
}
func (m *MemberScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberScore.Marshal(b, m, deterministic)
}
func (m *MemberScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberScore.Merge(m, src)
}
func (m *MemberScore) XXX_Size() int {
	return xxx_messageInfo_MemberScore.Size(m)
}
func (m *MemberScore) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberScore.DiscardUnknown(m)
}

var xxx_messageInfo_MemberScore proto.InternalMessageInfo

func (m *MemberScore) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *MemberScore) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

//zset 添加成员
type ZaddRequest struct {
	Key                  *Key           `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	MemberScores         []*MemberScore `protobuf:"bytes,2,rep,name=MemberScores,proto3" json:"MemberScores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ZaddRequest) Reset()         { *m = ZaddRequest{} }
func (m *ZaddRequest) String() string { return proto.CompactTextString(m) }
func (*ZaddRequest) ProtoMessage()    {}
func (*ZaddRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{30}
}

func (m *ZaddRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZaddRequest.Unmarshal(m, b)
}
func (m *ZaddRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZaddRequest.Marshal(b, m, deterministic)
}
func (m *ZaddRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZaddRequest.Merge(m, src)
}
func (m *ZaddRequest) XXX_Size() int {
	return xxx_messageInfo_ZaddRequest.Size(m)
}
func (m *ZaddRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZaddRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZaddRequest proto.InternalMessageInfo

func (m *ZaddRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZaddRequest) GetMemberScores() []*MemberScore {
	if m != nil {
		return m.MemberScores
	}
	return nil
}

//zset 移除成员
type ZremRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Members              []string `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZremRequest) Reset()         { *m = ZremRequest{} }
func (m *ZremRequest) String() string { return proto.CompactTextString(m) }
func (*ZremRequest) ProtoMessage()    {}
func (*ZremRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{31}
}

func (m *ZremRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZremRequest.Unmarshal(m, b)
}
func (m *ZremRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZremRequest.Marshal(b, m, deterministic)
}
func (m *ZremRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZremRequest.Merge(m, src)
}
func (m *ZremRequest) XXX_Size() int {
	return xxx_messageInfo_ZremRequest.Size(m)
}
func (m *ZremRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZremRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZremRequest proto.InternalMessageInfo

func (m *ZremRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZremRequest) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

//zset 获取成员的排行，从小到大
type ZrankRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Member               string   `protobuf:"bytes,2,opt,name=Member,proto3" json:"Member,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZrankRequest) Reset()         { *m = ZrankRequest{} }
func (m *ZrankRequest) String() string { return proto.CompactTextString(m) }
func (*ZrankRequest) ProtoMessage()    {}
func (*ZrankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{32}
}

func (m *ZrankRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZrankRequest.Unmarshal(m, b)
}
func (m *ZrankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZrankRequest.Marshal(b, m, deterministic)
}
func (m *ZrankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZrankRequest.Merge(m, src)
}
func (m *ZrankRequest) XXX_Size() int {
	return xxx_messageInfo_ZrankRequest.Size(m)
}
func (m *ZrankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZrankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZrankRequest proto.InternalMessageInfo

func (m *ZrankRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZrankRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

type ZrankReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Rank                 int64    `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZrankReply) Reset()         { *m = ZrankReply{} }
func (m *ZrankReply) String() string { return proto.CompactTextString(m) }
func (*ZrankReply) ProtoMessage()    {}
func (*ZrankReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{33}
}

func (m *ZrankReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZrankReply.Unmarshal(m, b)
}
func (m *ZrankReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZrankReply.Marshal(b, m, deterministic)
}
func (m *ZrankReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZrankReply.Merge(m, src)
}
func (m *ZrankReply) XXX_Size() int {
	return xxx_messageInfo_ZrankReply.Size(m)
}
func (m *ZrankReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ZrankReply.DiscardUnknown(m)
}

var xxx_messageInfo_ZrankReply proto.InternalMessageInfo

func (m *ZrankReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *ZrankReply) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

type ZRevRankRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Member               string   `protobuf:"bytes,2,opt,name=Member,proto3" json:"Member,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZRevRankRequest) Reset()         { *m = ZRevRankRequest{} }
func (m *ZRevRankRequest) String() string { return proto.CompactTextString(m) }
func (*ZRevRankRequest) ProtoMessage()    {}
func (*ZRevRankRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{34}
}

func (m *ZRevRankRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZRevRankRequest.Unmarshal(m, b)
}
func (m *ZRevRankRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZRevRankRequest.Marshal(b, m, deterministic)
}
func (m *ZRevRankRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZRevRankRequest.Merge(m, src)
}
func (m *ZRevRankRequest) XXX_Size() int {
	return xxx_messageInfo_ZRevRankRequest.Size(m)
}
func (m *ZRevRankRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZRevRankRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZRevRankRequest proto.InternalMessageInfo

func (m *ZRevRankRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZRevRankRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

type ZRevRankReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Rank                 int64    `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZRevRankReply) Reset()         { *m = ZRevRankReply{} }
func (m *ZRevRankReply) String() string { return proto.CompactTextString(m) }
func (*ZRevRankReply) ProtoMessage()    {}
func (*ZRevRankReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{35}
}

func (m *ZRevRankReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZRevRankReply.Unmarshal(m, b)
}
func (m *ZRevRankReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZRevRankReply.Marshal(b, m, deterministic)
}
func (m *ZRevRankReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZRevRankReply.Merge(m, src)
}
func (m *ZRevRankReply) XXX_Size() int {
	return xxx_messageInfo_ZRevRankReply.Size(m)
}
func (m *ZRevRankReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ZRevRankReply.DiscardUnknown(m)
}

var xxx_messageInfo_ZRevRankReply proto.InternalMessageInfo

func (m *ZRevRankReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *ZRevRankReply) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

//zset 获取指定范围的成员和分数，从小到大
type ZRangeRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	End                  int64    `protobuf:"varint,3,opt,name=End,proto3" json:"End,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZRangeRequest) Reset()         { *m = ZRangeRequest{} }
func (m *ZRangeRequest) String() string { return proto.CompactTextString(m) }
func (*ZRangeRequest) ProtoMessage()    {}
func (*ZRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{36}
}

func (m *ZRangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZRangeRequest.Unmarshal(m, b)
}
func (m *ZRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZRangeRequest.Marshal(b, m, deterministic)
}
func (m *ZRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZRangeRequest.Merge(m, src)
}
func (m *ZRangeRequest) XXX_Size() int {
	return xxx_messageInfo_ZRangeRequest.Size(m)
}
func (m *ZRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZRangeRequest proto.InternalMessageInfo

func (m *ZRangeRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZRangeRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ZRangeRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type ZRangeReply struct {
	ErrMsg               *ErrMsg        `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	MemberScores         []*MemberScore `protobuf:"bytes,2,rep,name=MemberScores,proto3" json:"MemberScores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ZRangeReply) Reset()         { *m = ZRangeReply{} }
func (m *ZRangeReply) String() string { return proto.CompactTextString(m) }
func (*ZRangeReply) ProtoMessage()    {}
func (*ZRangeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{37}
}

func (m *ZRangeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZRangeReply.Unmarshal(m, b)
}
func (m *ZRangeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZRangeReply.Marshal(b, m, deterministic)
}
func (m *ZRangeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZRangeReply.Merge(m, src)
}
func (m *ZRangeReply) XXX_Size() int {
	return xxx_messageInfo_ZRangeReply.Size(m)
}
func (m *ZRangeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ZRangeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ZRangeReply proto.InternalMessageInfo

func (m *ZRangeReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *ZRangeReply) GetMemberScores() []*MemberScore {
	if m != nil {
		return m.MemberScores
	}
	return nil
}

//zset 获取指定范围的成员和分数，从大到小
type ZRevRangeRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Start                int64    `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	End                  int64    `protobuf:"varint,3,opt,name=End,proto3" json:"End,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZRevRangeRequest) Reset()         { *m = ZRevRangeRequest{} }
func (m *ZRevRangeRequest) String() string { return proto.CompactTextString(m) }
func (*ZRevRangeRequest) ProtoMessage()    {}
func (*ZRevRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{38}
}

func (m *ZRevRangeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZRevRangeRequest.Unmarshal(m, b)
}
func (m *ZRevRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZRevRangeRequest.Marshal(b, m, deterministic)
}
func (m *ZRevRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZRevRangeRequest.Merge(m, src)
}
func (m *ZRevRangeRequest) XXX_Size() int {
	return xxx_messageInfo_ZRevRangeRequest.Size(m)
}
func (m *ZRevRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZRevRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZRevRangeRequest proto.InternalMessageInfo

func (m *ZRevRangeRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZRevRangeRequest) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ZRevRangeRequest) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type ZRevRangeReply struct {
	ErrMsg               *ErrMsg        `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	MemberScores         []*MemberScore `protobuf:"bytes,2,rep,name=MemberScores,proto3" json:"MemberScores,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ZRevRangeReply) Reset()         { *m = ZRevRangeReply{} }
func (m *ZRevRangeReply) String() string { return proto.CompactTextString(m) }
func (*ZRevRangeReply) ProtoMessage()    {}
func (*ZRevRangeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{39}
}

func (m *ZRevRangeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZRevRangeReply.Unmarshal(m, b)
}
func (m *ZRevRangeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZRevRangeReply.Marshal(b, m, deterministic)
}
func (m *ZRevRangeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZRevRangeReply.Merge(m, src)
}
func (m *ZRevRangeReply) XXX_Size() int {
	return xxx_messageInfo_ZRevRangeReply.Size(m)
}
func (m *ZRevRangeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ZRevRangeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ZRevRangeReply proto.InternalMessageInfo

func (m *ZRevRangeReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *ZRevRangeReply) GetMemberScores() []*MemberScore {
	if m != nil {
		return m.MemberScores
	}
	return nil
}

//获取指定成员的分数
type ZscoreRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Member               string   `protobuf:"bytes,2,opt,name=Member,proto3" json:"Member,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZscoreRequest) Reset()         { *m = ZscoreRequest{} }
func (m *ZscoreRequest) String() string { return proto.CompactTextString(m) }
func (*ZscoreRequest) ProtoMessage()    {}
func (*ZscoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{40}
}

func (m *ZscoreRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZscoreRequest.Unmarshal(m, b)
}
func (m *ZscoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZscoreRequest.Marshal(b, m, deterministic)
}
func (m *ZscoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZscoreRequest.Merge(m, src)
}
func (m *ZscoreRequest) XXX_Size() int {
	return xxx_messageInfo_ZscoreRequest.Size(m)
}
func (m *ZscoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZscoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZscoreRequest proto.InternalMessageInfo

func (m *ZscoreRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZscoreRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

//获取指定成员的分数
type ZscoreReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Score                float32  `protobuf:"fixed32,2,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZscoreReply) Reset()         { *m = ZscoreReply{} }
func (m *ZscoreReply) String() string { return proto.CompactTextString(m) }
func (*ZscoreReply) ProtoMessage()    {}
func (*ZscoreReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{41}
}

func (m *ZscoreReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZscoreReply.Unmarshal(m, b)
}
func (m *ZscoreReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZscoreReply.Marshal(b, m, deterministic)
}
func (m *ZscoreReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZscoreReply.Merge(m, src)
}
func (m *ZscoreReply) XXX_Size() int {
	return xxx_messageInfo_ZscoreReply.Size(m)
}
func (m *ZscoreReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ZscoreReply.DiscardUnknown(m)
}

var xxx_messageInfo_ZscoreReply proto.InternalMessageInfo

func (m *ZscoreReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *ZscoreReply) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

//获取指定成员的分数
type ZincrbyRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Member               string   `protobuf:"bytes,2,opt,name=Member,proto3" json:"Member,omitempty"`
	Score                float32  `protobuf:"fixed32,3,opt,name=Score,proto3" json:"Score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZincrbyRequest) Reset()         { *m = ZincrbyRequest{} }
func (m *ZincrbyRequest) String() string { return proto.CompactTextString(m) }
func (*ZincrbyRequest) ProtoMessage()    {}
func (*ZincrbyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{42}
}

func (m *ZincrbyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZincrbyRequest.Unmarshal(m, b)
}
func (m *ZincrbyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZincrbyRequest.Marshal(b, m, deterministic)
}
func (m *ZincrbyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZincrbyRequest.Merge(m, src)
}
func (m *ZincrbyRequest) XXX_Size() int {
	return xxx_messageInfo_ZincrbyRequest.Size(m)
}
func (m *ZincrbyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZincrbyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZincrbyRequest proto.InternalMessageInfo

func (m *ZincrbyRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ZincrbyRequest) GetMember() string {
	if m != nil {
		return m.Member
	}
	return ""
}

func (m *ZincrbyRequest) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

//加锁请求
type LockRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	MilliSecond          int64    `protobuf:"varint,2,opt,name=MilliSecond,proto3" json:"MilliSecond,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockRequest) Reset()         { *m = LockRequest{} }
func (m *LockRequest) String() string { return proto.CompactTextString(m) }
func (*LockRequest) ProtoMessage()    {}
func (*LockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{43}
}

func (m *LockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockRequest.Unmarshal(m, b)
}
func (m *LockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockRequest.Marshal(b, m, deterministic)
}
func (m *LockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockRequest.Merge(m, src)
}
func (m *LockRequest) XXX_Size() int {
	return xxx_messageInfo_LockRequest.Size(m)
}
func (m *LockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockRequest proto.InternalMessageInfo

func (m *LockRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LockRequest) GetMilliSecond() int64 {
	if m != nil {
		return m.MilliSecond
	}
	return 0
}

//加锁返回
type LockReply struct {
	ErrMsg               *ErrMsg  `protobuf:"bytes,1,opt,name=ErrMsg,proto3" json:"ErrMsg,omitempty"`
	Sucess               bool     `protobuf:"varint,2,opt,name=Sucess,proto3" json:"Sucess,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LockReply) Reset()         { *m = LockReply{} }
func (m *LockReply) String() string { return proto.CompactTextString(m) }
func (*LockReply) ProtoMessage()    {}
func (*LockReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_75c18c5faaf7e2d4, []int{44}
}

func (m *LockReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LockReply.Unmarshal(m, b)
}
func (m *LockReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LockReply.Marshal(b, m, deterministic)
}
func (m *LockReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockReply.Merge(m, src)
}
func (m *LockReply) XXX_Size() int {
	return xxx_messageInfo_LockReply.Size(m)
}
func (m *LockReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LockReply.DiscardUnknown(m)
}

var xxx_messageInfo_LockReply proto.InternalMessageInfo

func (m *LockReply) GetErrMsg() *ErrMsg {
	if m != nil {
		return m.ErrMsg
	}
	return nil
}

func (m *LockReply) GetSucess() bool {
	if m != nil {
		return m.Sucess
	}
	return false
}

func init() {
	proto.RegisterEnum("pb.ErrCode", ErrCode_name, ErrCode_value)
	proto.RegisterEnum("pb.DataType", DataType_name, DataType_value)
	proto.RegisterType((*ErrMsg)(nil), "pb.ErrMsg")
	proto.RegisterType((*Key)(nil), "pb.Key")
	proto.RegisterType((*DelRequest)(nil), "pb.DelRequest")
	proto.RegisterType((*ExistRequest)(nil), "pb.ExistRequest")
	proto.RegisterType((*ExistsReply)(nil), "pb.ExistsReply")
	proto.RegisterType((*ExpireRequest)(nil), "pb.ExpireRequest")
	proto.RegisterType((*SetRequest)(nil), "pb.SetRequest")
	proto.RegisterType((*GetReply)(nil), "pb.GetReply")
	proto.RegisterType((*HmSetRequest)(nil), "pb.HmSetRequest")
	proto.RegisterMapType((map[string]string)(nil), "pb.HmSetRequest.FieldValuesEntry")
	proto.RegisterType((*HmGetRequest)(nil), "pb.HmGetRequest")
	proto.RegisterType((*HmGetReply)(nil), "pb.HmGetReply")
	proto.RegisterMapType((map[string]string)(nil), "pb.HmGetReply.FieldValuesEntry")
	proto.RegisterType((*HGetAllReply)(nil), "pb.HGetAllReply")
	proto.RegisterMapType((map[string]string)(nil), "pb.HGetAllReply.FieldValuesEntry")
	proto.RegisterType((*HincrbyRequest)(nil), "pb.HincrbyRequest")
	proto.RegisterType((*HincrbyReply)(nil), "pb.HincrbyReply")
	proto.RegisterType((*HdelRequest)(nil), "pb.HdelRequest")
	proto.RegisterType((*HExistsRequest)(nil), "pb.HExistsRequest")
	proto.RegisterType((*HExistsReply)(nil), "pb.HExistsReply")
	proto.RegisterType((*LPushRequest)(nil), "pb.LPushRequest")
	proto.RegisterType((*RPushRequest)(nil), "pb.RPushRequest")
	proto.RegisterType((*LrangeRequest)(nil), "pb.LrangeRequest")
	proto.RegisterType((*LLpopReply)(nil), "pb.LLpopReply")
	proto.RegisterType((*LRpopReply)(nil), "pb.LRpopReply")
	proto.RegisterType((*LlenReply)(nil), "pb.LlenReply")
	proto.RegisterType((*LrangeReply)(nil), "pb.LrangeReply")
	proto.RegisterType((*SaddRequest)(nil), "pb.SaddRequest")
	proto.RegisterType((*SremRequest)(nil), "pb.SremRequest")
	proto.RegisterType((*SisMemberRequest)(nil), "pb.SisMemberRequest")
	proto.RegisterType((*SisMemberReply)(nil), "pb.SisMemberReply")
	proto.RegisterType((*SmembersReply)(nil), "pb.SmembersReply")
	proto.RegisterType((*MemberScore)(nil), "pb.MemberScore")
	proto.RegisterType((*ZaddRequest)(nil), "pb.ZaddRequest")
	proto.RegisterType((*ZremRequest)(nil), "pb.ZremRequest")
	proto.RegisterType((*ZrankRequest)(nil), "pb.ZrankRequest")
	proto.RegisterType((*ZrankReply)(nil), "pb.ZrankReply")
	proto.RegisterType((*ZRevRankRequest)(nil), "pb.ZRevRankRequest")
	proto.RegisterType((*ZRevRankReply)(nil), "pb.ZRevRankReply")
	proto.RegisterType((*ZRangeRequest)(nil), "pb.ZRangeRequest")
	proto.RegisterType((*ZRangeReply)(nil), "pb.ZRangeReply")
	proto.RegisterType((*ZRevRangeRequest)(nil), "pb.ZRevRangeRequest")
	proto.RegisterType((*ZRevRangeReply)(nil), "pb.ZRevRangeReply")
	proto.RegisterType((*ZscoreRequest)(nil), "pb.ZscoreRequest")
	proto.RegisterType((*ZscoreReply)(nil), "pb.ZscoreReply")
	proto.RegisterType((*ZincrbyRequest)(nil), "pb.ZincrbyRequest")
	proto.RegisterType((*LockRequest)(nil), "pb.LockRequest")
	proto.RegisterType((*LockReply)(nil), "pb.LockReply")
}

func init() { proto.RegisterFile("game-redis.proto", fileDescriptor_75c18c5faaf7e2d4) }

var fileDescriptor_75c18c5faaf7e2d4 = []byte{
	// 1273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5d, 0x6f, 0xe3, 0x44,
	0x17, 0x7e, 0x1d, 0x3b, 0x5f, 0xc7, 0x49, 0xea, 0x77, 0xa8, 0xaa, 0x12, 0x01, 0xdb, 0xba, 0x74,
	0x69, 0x97, 0xa5, 0x2b, 0x65, 0xb5, 0x12, 0x62, 0x05, 0x4b, 0xba, 0x49, 0x93, 0xb6, 0xa9, 0x84,
	0x26, 0x2c, 0x08, 0x4b, 0x5c, 0x38, 0xcd, 0x90, 0x5a, 0x75, 0x1c, 0x63, 0xbb, 0xd5, 0x66, 0x7f,
	0x14, 0x37, 0x5c, 0xf0, 0xdb, 0xb8, 0x43, 0xf3, 0x61, 0x7b, 0x1c, 0x35, 0x2b, 0xb7, 0x49, 0xef,
	0x7c, 0x26, 0x67, 0x9e, 0x39, 0x1f, 0x33, 0xe7, 0x3c, 0x27, 0x60, 0x4c, 0xec, 0x29, 0xf9, 0x26,
	0x20, 0x63, 0x27, 0x3c, 0xf2, 0x83, 0x59, 0x34, 0x43, 0x05, 0x7f, 0x64, 0xf6, 0xa0, 0xd4, 0x0d,
	0x82, 0x8b, 0x70, 0x82, 0xf6, 0xa1, 0xdc, 0x0d, 0x82, 0xb7, 0xb3, 0x31, 0xd9, 0x56, 0x76, 0x94,
	0x83, 0x46, 0x4b, 0x3f, 0xf2, 0x47, 0x47, 0x62, 0x09, 0xc7, 0xbf, 0xa1, 0xad, 0x78, 0xc3, 0x76,
	0x61, 0x47, 0x39, 0xa8, 0x62, 0x21, 0x99, 0x2f, 0x40, 0x3d, 0x27, 0x73, 0xfa, 0x73, 0xcf, 0x9e,
	0x92, 0xd3, 0x31, 0x03, 0x29, 0x62, 0x21, 0x21, 0x03, 0xd4, 0x6b, 0x32, 0x17, 0x7b, 0xe8, 0xa7,
	0x79, 0x0a, 0xd0, 0x21, 0x2e, 0x26, 0x7f, 0xde, 0x90, 0x30, 0x42, 0x9f, 0xb2, 0xed, 0x6c, 0x93,
	0xde, 0x2a, 0xd3, 0x93, 0xcf, 0xc9, 0x1c, 0x33, 0xc8, 0x1d, 0xd0, 0x7e, 0x9e, 0xfb, 0x84, 0xed,
	0x6d, 0xb4, 0x6a, 0xf4, 0xb7, 0x8e, 0x1d, 0xd9, 0x74, 0x0d, 0xb3, 0x5f, 0xcc, 0x73, 0xa8, 0x75,
	0xdf, 0x3b, 0x61, 0xb4, 0x16, 0xb0, 0x1e, 0xe8, 0x0c, 0x2c, 0xc4, 0xc4, 0x77, 0xe7, 0xc8, 0x4c,
	0xfc, 0xe5, 0x70, 0x20, 0xa2, 0x72, 0x11, 0x4e, 0x62, 0xdf, 0xd1, 0x26, 0x14, 0xd9, 0x16, 0x86,
	0x5a, 0xc1, 0x5c, 0x30, 0xc7, 0x50, 0xef, 0xbe, 0xf7, 0x9d, 0x80, 0xac, 0xc3, 0x2c, 0x1a, 0xd8,
	0x21, 0xb9, 0x9c, 0x79, 0xe3, 0x6d, 0x75, 0x47, 0x39, 0x50, 0xb1, 0x90, 0xcc, 0xef, 0x01, 0x86,
	0x24, 0x8f, 0xe7, 0x9b, 0x50, 0xfc, 0xc5, 0x76, 0x6f, 0x88, 0xc8, 0x01, 0x17, 0xcc, 0x0e, 0x54,
	0x7a, 0x74, 0xfb, 0x3d, 0x5c, 0xbd, 0x03, 0xe5, 0x2f, 0x05, 0x6a, 0xfd, 0x69, 0x3e, 0x3b, 0xde,
	0x82, 0x7e, 0xe2, 0x10, 0x77, 0xcc, 0x76, 0x86, 0xdb, 0x85, 0x1d, 0xf5, 0x40, 0x6f, 0xed, 0x52,
	0x15, 0x19, 0xe1, 0x48, 0xd2, 0xe9, 0x7a, 0x51, 0x30, 0xc7, 0xf2, 0xae, 0xe6, 0x0f, 0x60, 0x2c,
	0x2a, 0xc4, 0x57, 0x4c, 0x49, 0xae, 0x18, 0x35, 0xf6, 0x56, 0x36, 0x96, 0x09, 0xdf, 0x15, 0xbe,
	0x55, 0xcc, 0x36, 0xb5, 0xb7, 0x97, 0xcb, 0xde, 0x2d, 0x28, 0xb1, 0xa3, 0xb8, 0xa9, 0x55, 0x2c,
	0x24, 0xf3, 0x6f, 0x05, 0x40, 0x60, 0xe4, 0x0d, 0x5e, 0xfb, 0x2e, 0xd7, 0x9f, 0x70, 0xd7, 0x63,
	0xa0, 0x47, 0x76, 0xfc, 0x1f, 0x9a, 0xa9, 0x1e, 0x89, 0xda, 0xae, 0x9b, 0xdf, 0xee, 0x8f, 0xa4,
	0x4c, 0x82, 0x7a, 0x64, 0xcb, 0x7f, 0x85, 0x46, 0xdf, 0xf1, 0x2e, 0x83, 0xd1, 0x3c, 0xdf, 0x65,
	0x67, 0x87, 0xc5, 0x30, 0x4c, 0x48, 0x2f, 0x2f, 0x7f, 0x42, 0xe2, 0xf2, 0xf6, 0xa1, 0x96, 0x00,
	0x3f, 0xe8, 0x19, 0x24, 0x48, 0x3f, 0x82, 0xde, 0x1f, 0xe7, 0xaa, 0x69, 0xcb, 0x2e, 0x55, 0x1b,
	0x1a, 0xfd, 0xb8, 0xfa, 0x3c, 0xcc, 0x49, 0xe6, 0xce, 0x7a, 0x0a, 0xd8, 0x1b, 0xa8, 0x0d, 0x7e,
	0xba, 0x09, 0xaf, 0xee, 0x57, 0x5c, 0xd4, 0xb4, 0x2c, 0xbc, 0x81, 0x1a, 0x5e, 0x09, 0x00, 0x43,
	0x7d, 0x10, 0xd8, 0xde, 0x84, 0xe4, 0x43, 0x18, 0x46, 0x76, 0x10, 0xc5, 0x29, 0x61, 0x02, 0xbd,
	0x61, 0xdd, 0xa4, 0x66, 0xd2, 0x4f, 0xf3, 0x04, 0x60, 0x30, 0xf0, 0x67, 0xfe, 0xaa, 0x35, 0x8f,
	0xe2, 0xe0, 0x35, 0xe0, 0xb4, 0xa1, 0x3a, 0x70, 0x89, 0x97, 0x1f, 0xc6, 0x00, 0xd5, 0x25, 0x9e,
	0x70, 0x93, 0x7e, 0x9a, 0xa7, 0xa0, 0xc7, 0x61, 0xca, 0x0b, 0xb2, 0x05, 0x25, 0xe9, 0x35, 0x57,
	0xb1, 0x90, 0xcc, 0x63, 0xd0, 0x87, 0xf6, 0x78, 0x9c, 0x23, 0xde, 0xdb, 0x50, 0xbe, 0x20, 0xd3,
	0x11, 0x09, 0x62, 0x88, 0x58, 0x64, 0x18, 0x01, 0x99, 0xae, 0x84, 0xd1, 0x05, 0x63, 0xe8, 0x84,
	0x5c, 0xca, 0xf7, 0x9e, 0xb8, 0x6e, 0xcc, 0x4a, 0xb8, 0x64, 0x9e, 0x41, 0x43, 0x82, 0x59, 0xed,
	0x39, 0x5c, 0x40, 0x7d, 0x38, 0xe5, 0xe6, 0xe5, 0x87, 0x5a, 0xee, 0xe1, 0x6b, 0xd0, 0xf9, 0xe7,
	0xf0, 0x72, 0x16, 0x10, 0xc9, 0x03, 0x45, 0xf6, 0x80, 0x5d, 0x6b, 0xaa, 0xc0, 0x6c, 0x29, 0x60,
	0x2e, 0x98, 0xbf, 0x83, 0x6e, 0xe5, 0x4b, 0xd3, 0x4b, 0xa8, 0x49, 0xc7, 0xc4, 0xc5, 0x7b, 0x83,
	0xea, 0x48, 0xeb, 0x38, 0xa3, 0x44, 0x33, 0x68, 0xad, 0x9a, 0xc1, 0x36, 0xd4, 0xac, 0xc0, 0xf6,
	0xae, 0x57, 0xc8, 0x5e, 0x07, 0x40, 0x40, 0xe4, 0x0d, 0x37, 0x02, 0x0d, 0xdb, 0xde, 0xb5, 0x78,
	0x1c, 0xec, 0xdb, 0xec, 0xc0, 0x86, 0x85, 0xc9, 0x2d, 0x5e, 0xcd, 0x96, 0x1e, 0xd4, 0x53, 0x94,
	0x55, 0xcc, 0xc1, 0x14, 0x68, 0xcd, 0x35, 0xed, 0x0f, 0xd0, 0x63, 0xcc, 0xbc, 0xa6, 0x3d, 0xe8,
	0x5e, 0xbc, 0x03, 0x43, 0x04, 0x61, 0xad, 0xe6, 0x3b, 0xd0, 0x90, 0x60, 0x1f, 0xd5, 0x83, 0x63,
	0xa8, 0x5b, 0x21, 0x5b, 0x5f, 0xe5, 0x2a, 0xe8, 0x31, 0xc6, 0x3d, 0x2a, 0xca, 0x1d, 0xaf, 0xf8,
	0x37, 0x68, 0x58, 0xb9, 0x29, 0xcd, 0x12, 0x6b, 0x52, 0x68, 0x55, 0x86, 0x3e, 0x03, 0x7d, 0x30,
	0xbb, 0xbc, 0xce, 0x35, 0x7a, 0xe8, 0x17, 0x8e, 0xeb, 0x3a, 0x62, 0xba, 0xe0, 0xa9, 0x92, 0x97,
	0xcc, 0x1e, 0x54, 0x39, 0xd6, 0x3d, 0x9a, 0xcb, 0xf0, 0xe6, 0x92, 0x84, 0xa1, 0x28, 0xa0, 0x42,
	0x7a, 0xb6, 0x9b, 0x8c, 0x98, 0x08, 0x62, 0x15, 0xe3, 0x7f, 0xf4, 0xfb, 0xc4, 0x76, 0x5c, 0x32,
	0x36, 0x94, 0x67, 0x67, 0x50, 0x89, 0x07, 0x1f, 0xa4, 0x43, 0xf9, 0xd4, 0xbb, 0xb5, 0x5d, 0x87,
	0x70, 0xa5, 0x61, 0x14, 0x38, 0xde, 0xc4, 0x50, 0x50, 0x05, 0xb4, 0xbe, 0x1d, 0x5e, 0x19, 0x05,
	0xfa, 0x35, 0x70, 0xc2, 0xc8, 0x50, 0x51, 0x19, 0xd4, 0x21, 0x89, 0x0c, 0x8d, 0x2e, 0x59, 0x21,
	0x89, 0x8c, 0x62, 0xeb, 0xdf, 0x2a, 0x54, 0xe9, 0xf8, 0x89, 0xe9, 0xcc, 0x8b, 0x76, 0x41, 0xed,
	0x10, 0x17, 0x35, 0xd8, 0x6c, 0x95, 0x90, 0xb4, 0xa6, 0x64, 0x3f, 0xfa, 0x0a, 0x4a, 0x7c, 0x62,
	0x43, 0xff, 0x67, 0xab, 0xf2, 0xf4, 0x96, 0x51, 0xfc, 0x9a, 0x2a, 0x52, 0x8a, 0x85, 0x0c, 0xae,
	0x98, 0x0e, 0x9f, 0xcd, 0x8d, 0x64, 0x45, 0xb4, 0x89, 0x5d, 0x66, 0x19, 0x3f, 0x38, 0x1d, 0x70,
	0x32, 0x78, 0x9f, 0x81, 0xda, 0x23, 0x11, 0x8a, 0x13, 0xd3, 0x64, 0x03, 0x60, 0x32, 0x5a, 0xec,
	0x43, 0x91, 0x8d, 0x46, 0xfc, 0x30, 0x79, 0x4a, 0xca, 0x80, 0x1c, 0x52, 0xb5, 0x5e, 0xaa, 0x96,
	0x8e, 0x37, 0xcd, 0x46, 0x76, 0xc6, 0x40, 0x5f, 0x42, 0x59, 0x30, 0xf7, 0xf4, 0x4c, 0x63, 0x91,
	0xcf, 0xa3, 0x17, 0x50, 0x16, 0xc4, 0x18, 0x21, 0xf6, 0x63, 0xe6, 0xae, 0x8a, 0x0d, 0x32, 0x73,
	0xde, 0x03, 0x8d, 0xf2, 0x5f, 0xc4, 0x42, 0x20, 0x31, 0xe1, 0x8c, 0x99, 0x14, 0x95, 0xf0, 0xe0,
	0x71, 0xd4, 0x0c, 0xdf, 0x15, 0xa8, 0x72, 0xfc, 0xf6, 0xa1, 0x38, 0xf0, 0x6f, 0xc2, 0x2b, 0xee,
	0x97, 0xcc, 0x48, 0x33, 0xb8, 0x4f, 0x40, 0xa3, 0xb4, 0x2e, 0x75, 0x88, 0x39, 0x2d, 0x51, 0xbd,
	0x7d, 0x28, 0xe2, 0x14, 0x07, 0x7f, 0x04, 0x07, 0xdf, 0x81, 0x93, 0x52, 0xbd, 0xe7, 0x50, 0xe2,
	0x6c, 0x8b, 0xdf, 0x92, 0x0c, 0x41, 0xe5, 0xd9, 0x97, 0xc9, 0xd8, 0x17, 0xa0, 0x51, 0x7a, 0x97,
	0xc2, 0xd5, 0x99, 0x46, 0xc2, 0xf8, 0xf6, 0x40, 0xa3, 0x84, 0x8b, 0xc7, 0x4c, 0xa2, 0x5e, 0x19,
	0x9b, 0xa8, 0x52, 0x40, 0xa6, 0x42, 0x29, 0xed, 0xcc, 0x19, 0xa5, 0x57, 0x50, 0x4d, 0xb8, 0x0e,
	0xda, 0x64, 0x9a, 0x0b, 0x0c, 0xaa, 0x89, 0x16, 0x56, 0xa9, 0x01, 0x4f, 0xa1, 0x12, 0xd3, 0x9a,
	0xd4, 0x48, 0xe6, 0x59, 0x96, 0xed, 0xec, 0x81, 0x66, 0x25, 0x86, 0x5a, 0xcb, 0x0d, 0xfd, 0x90,
	0x18, 0x6a, 0x2d, 0x31, 0xf4, 0x10, 0x8a, 0x1f, 0x68, 0x5b, 0xe7, 0x89, 0x90, 0x49, 0x02, 0x8f,
	0xb5, 0xd4, 0xf3, 0x5b, 0x50, 0xb1, 0x02, 0xde, 0x75, 0xd1, 0x27, 0xec, 0xb7, 0x6c, 0x27, 0xe7,
	0x86, 0x66, 0x1b, 0xf3, 0x73, 0x28, 0x59, 0x52, 0x7e, 0x32, 0xcd, 0x96, 0xe7, 0x47, 0xee, 0x95,
	0xaf, 0xa0, 0x2a, 0x4e, 0x98, 0x10, 0x1e, 0xb5, 0xc5, 0x0e, 0xc7, 0xa3, 0xb6, 0xd0, 0xa0, 0xe8,
	0x21, 0xac, 0x07, 0x88, 0x43, 0xe4, 0x9e, 0x22, 0x0e, 0x91, 0x5a, 0xc4, 0x21, 0x94, 0x2d, 0xf9,
	0x25, 0x65, 0xab, 0x7e, 0x26, 0x38, 0x4f, 0x41, 0xa3, 0xc5, 0x96, 0x47, 0x50, 0x2a, 0xe1, 0xe2,
	0xde, 0x24, 0x75, 0xf8, 0x73, 0x28, 0xbd, 0xf3, 0x98, 0x66, 0x92, 0x34, 0x09, 0xe6, 0xb8, 0x64,
	0x69, 0x47, 0xaf, 0xfd, 0xd1, 0xa8, 0xc4, 0xfe, 0xea, 0x7b, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3c, 0xd7, 0xb9, 0x7f, 0xfe, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameRedisClient is the client API for GameRedis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameRedisClient interface {
	//删除键
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//设置Key过期时间
	Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//判断Key是否存在
	Exists(ctx context.Context, in *ExistRequest, opts ...grpc.CallOption) (*ExistsReply, error)
	//设置key value
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//查询key value
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetReply, error)
	//hash批量设置
	HmSet(ctx context.Context, in *HmSetRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//hash批量查询
	HmGet(ctx context.Context, in *HmGetRequest, opts ...grpc.CallOption) (*HmGetReply, error)
	//hash查询所有k-v
	HGetAll(ctx context.Context, in *Key, opts ...grpc.CallOption) (*HGetAllReply, error)
	//hash 对应k-v v增加相应的值
	Hincrby(ctx context.Context, in *HincrbyRequest, opts ...grpc.CallOption) (*HincrbyReply, error)
	//hash删除相应的k
	Hdel(ctx context.Context, in *HdelRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//hash查询对应的K是否存在
	Hexists(ctx context.Context, in *HExistsRequest, opts ...grpc.CallOption) (*HExistsReply, error)
	//list 左进（list头插入）
	Lpush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//list 左出（移除并返回list头第一个元素）
	Lpop(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LLpopReply, error)
	//list 右进（list尾插入）
	Rpush(ctx context.Context, in *RPushRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//list 右出（移除并返回表头第一个元素）
	Rpop(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LRpopReply, error)
	//list 获取指定范围的数据
	Lrange(ctx context.Context, in *LrangeRequest, opts ...grpc.CallOption) (*LrangeReply, error)
	//list长度
	Llen(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LlenReply, error)
	//set 添加元素
	Sadd(ctx context.Context, in *SaddRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//set 移除元素
	Srem(ctx context.Context, in *SremRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//set 判断是否包含元素
	SisMember(ctx context.Context, in *SisMemberRequest, opts ...grpc.CallOption) (*SisMemberReply, error)
	//set 返回集合中所有的元素
	Smembers(ctx context.Context, in *Key, opts ...grpc.CallOption) (*SmembersReply, error)
	//zset 添加元素 member score
	Zadd(ctx context.Context, in *ZaddRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//zset 移除元素 member
	Zrem(ctx context.Context, in *ZremRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//zset 获取member的排行，从小到大
	Zrank(ctx context.Context, in *ZrankRequest, opts ...grpc.CallOption) (*ZrankReply, error)
	//zset 获取member的排行，从大到小
	ZrevRank(ctx context.Context, in *ZRevRankRequest, opts ...grpc.CallOption) (*ZRevRankReply, error)
	//zset 返回指定区间的成员，从小到大
	Zrange(ctx context.Context, in *ZRangeRequest, opts ...grpc.CallOption) (*ZRangeReply, error)
	//zset 返回指定区间的成员，从大到小
	ZrevRange(ctx context.Context, in *ZRevRangeRequest, opts ...grpc.CallOption) (*ZRevRangeReply, error)
	//zset 返回member score
	Zscore(ctx context.Context, in *ZscoreRequest, opts ...grpc.CallOption) (*ZscoreReply, error)
	//zset 指定成员member的score 增加指定的增量
	Zincrby(ctx context.Context, in *ZincrbyRequest, opts ...grpc.CallOption) (*ErrMsg, error)
	//加锁
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockReply, error)
	//解锁
	UnLock(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ErrMsg, error)
}

type gameRedisClient struct {
	cc *grpc.ClientConn
}

func NewGameRedisClient(cc *grpc.ClientConn) GameRedisClient {
	return &gameRedisClient{cc}
}

func (c *gameRedisClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Expire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Exists(ctx context.Context, in *ExistRequest, opts ...grpc.CallOption) (*ExistsReply, error) {
	out := new(ExistsReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) HmSet(ctx context.Context, in *HmSetRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/HmSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) HmGet(ctx context.Context, in *HmGetRequest, opts ...grpc.CallOption) (*HmGetReply, error) {
	out := new(HmGetReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/HmGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) HGetAll(ctx context.Context, in *Key, opts ...grpc.CallOption) (*HGetAllReply, error) {
	out := new(HGetAllReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/HGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Hincrby(ctx context.Context, in *HincrbyRequest, opts ...grpc.CallOption) (*HincrbyReply, error) {
	out := new(HincrbyReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Hincrby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Hdel(ctx context.Context, in *HdelRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Hdel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Hexists(ctx context.Context, in *HExistsRequest, opts ...grpc.CallOption) (*HExistsReply, error) {
	out := new(HExistsReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Hexists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Lpush(ctx context.Context, in *LPushRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Lpush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Lpop(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LLpopReply, error) {
	out := new(LLpopReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Lpop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Rpush(ctx context.Context, in *RPushRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Rpush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Rpop(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LRpopReply, error) {
	out := new(LRpopReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Rpop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Lrange(ctx context.Context, in *LrangeRequest, opts ...grpc.CallOption) (*LrangeReply, error) {
	out := new(LrangeReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Lrange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Llen(ctx context.Context, in *Key, opts ...grpc.CallOption) (*LlenReply, error) {
	out := new(LlenReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Llen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Sadd(ctx context.Context, in *SaddRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Sadd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Srem(ctx context.Context, in *SremRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Srem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) SisMember(ctx context.Context, in *SisMemberRequest, opts ...grpc.CallOption) (*SisMemberReply, error) {
	out := new(SisMemberReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/SisMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Smembers(ctx context.Context, in *Key, opts ...grpc.CallOption) (*SmembersReply, error) {
	out := new(SmembersReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Smembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Zadd(ctx context.Context, in *ZaddRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Zadd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Zrem(ctx context.Context, in *ZremRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/zrem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Zrank(ctx context.Context, in *ZrankRequest, opts ...grpc.CallOption) (*ZrankReply, error) {
	out := new(ZrankReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/zrank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) ZrevRank(ctx context.Context, in *ZRevRankRequest, opts ...grpc.CallOption) (*ZRevRankReply, error) {
	out := new(ZRevRankReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/ZrevRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Zrange(ctx context.Context, in *ZRangeRequest, opts ...grpc.CallOption) (*ZRangeReply, error) {
	out := new(ZRangeReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Zrange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) ZrevRange(ctx context.Context, in *ZRevRangeRequest, opts ...grpc.CallOption) (*ZRevRangeReply, error) {
	out := new(ZRevRangeReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/ZrevRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Zscore(ctx context.Context, in *ZscoreRequest, opts ...grpc.CallOption) (*ZscoreReply, error) {
	out := new(ZscoreReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Zscore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Zincrby(ctx context.Context, in *ZincrbyRequest, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Zincrby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockReply, error) {
	out := new(LockReply)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameRedisClient) UnLock(ctx context.Context, in *Key, opts ...grpc.CallOption) (*ErrMsg, error) {
	out := new(ErrMsg)
	err := c.cc.Invoke(ctx, "/pb.GameRedis/UnLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameRedisServer is the server API for GameRedis service.
type GameRedisServer interface {
	//删除键
	Del(context.Context, *DelRequest) (*ErrMsg, error)
	//设置Key过期时间
	Expire(context.Context, *ExpireRequest) (*ErrMsg, error)
	//判断Key是否存在
	Exists(context.Context, *ExistRequest) (*ExistsReply, error)
	//设置key value
	Set(context.Context, *SetRequest) (*ErrMsg, error)
	//查询key value
	Get(context.Context, *Key) (*GetReply, error)
	//hash批量设置
	HmSet(context.Context, *HmSetRequest) (*ErrMsg, error)
	//hash批量查询
	HmGet(context.Context, *HmGetRequest) (*HmGetReply, error)
	//hash查询所有k-v
	HGetAll(context.Context, *Key) (*HGetAllReply, error)
	//hash 对应k-v v增加相应的值
	Hincrby(context.Context, *HincrbyRequest) (*HincrbyReply, error)
	//hash删除相应的k
	Hdel(context.Context, *HdelRequest) (*ErrMsg, error)
	//hash查询对应的K是否存在
	Hexists(context.Context, *HExistsRequest) (*HExistsReply, error)
	//list 左进（list头插入）
	Lpush(context.Context, *LPushRequest) (*ErrMsg, error)
	//list 左出（移除并返回list头第一个元素）
	Lpop(context.Context, *Key) (*LLpopReply, error)
	//list 右进（list尾插入）
	Rpush(context.Context, *RPushRequest) (*ErrMsg, error)
	//list 右出（移除并返回表头第一个元素）
	Rpop(context.Context, *Key) (*LRpopReply, error)
	//list 获取指定范围的数据
	Lrange(context.Context, *LrangeRequest) (*LrangeReply, error)
	//list长度
	Llen(context.Context, *Key) (*LlenReply, error)
	//set 添加元素
	Sadd(context.Context, *SaddRequest) (*ErrMsg, error)
	//set 移除元素
	Srem(context.Context, *SremRequest) (*ErrMsg, error)
	//set 判断是否包含元素
	SisMember(context.Context, *SisMemberRequest) (*SisMemberReply, error)
	//set 返回集合中所有的元素
	Smembers(context.Context, *Key) (*SmembersReply, error)
	//zset 添加元素 member score
	Zadd(context.Context, *ZaddRequest) (*ErrMsg, error)
	//zset 移除元素 member
	Zrem(context.Context, *ZremRequest) (*ErrMsg, error)
	//zset 获取member的排行，从小到大
	Zrank(context.Context, *ZrankRequest) (*ZrankReply, error)
	//zset 获取member的排行，从大到小
	ZrevRank(context.Context, *ZRevRankRequest) (*ZRevRankReply, error)
	//zset 返回指定区间的成员，从小到大
	Zrange(context.Context, *ZRangeRequest) (*ZRangeReply, error)
	//zset 返回指定区间的成员，从大到小
	ZrevRange(context.Context, *ZRevRangeRequest) (*ZRevRangeReply, error)
	//zset 返回member score
	Zscore(context.Context, *ZscoreRequest) (*ZscoreReply, error)
	//zset 指定成员member的score 增加指定的增量
	Zincrby(context.Context, *ZincrbyRequest) (*ErrMsg, error)
	//加锁
	Lock(context.Context, *LockRequest) (*LockReply, error)
	//解锁
	UnLock(context.Context, *Key) (*ErrMsg, error)
}

// UnimplementedGameRedisServer can be embedded to have forward compatible implementations.
type UnimplementedGameRedisServer struct {
}

func (*UnimplementedGameRedisServer) Del(ctx context.Context, req *DelRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (*UnimplementedGameRedisServer) Expire(ctx context.Context, req *ExpireRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expire not implemented")
}
func (*UnimplementedGameRedisServer) Exists(ctx context.Context, req *ExistRequest) (*ExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (*UnimplementedGameRedisServer) Set(ctx context.Context, req *SetRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedGameRedisServer) Get(ctx context.Context, req *Key) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGameRedisServer) HmSet(ctx context.Context, req *HmSetRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HmSet not implemented")
}
func (*UnimplementedGameRedisServer) HmGet(ctx context.Context, req *HmGetRequest) (*HmGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HmGet not implemented")
}
func (*UnimplementedGameRedisServer) HGetAll(ctx context.Context, req *Key) (*HGetAllReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGetAll not implemented")
}
func (*UnimplementedGameRedisServer) Hincrby(ctx context.Context, req *HincrbyRequest) (*HincrbyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hincrby not implemented")
}
func (*UnimplementedGameRedisServer) Hdel(ctx context.Context, req *HdelRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hdel not implemented")
}
func (*UnimplementedGameRedisServer) Hexists(ctx context.Context, req *HExistsRequest) (*HExistsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hexists not implemented")
}
func (*UnimplementedGameRedisServer) Lpush(ctx context.Context, req *LPushRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lpush not implemented")
}
func (*UnimplementedGameRedisServer) Lpop(ctx context.Context, req *Key) (*LLpopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lpop not implemented")
}
func (*UnimplementedGameRedisServer) Rpush(ctx context.Context, req *RPushRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpush not implemented")
}
func (*UnimplementedGameRedisServer) Rpop(ctx context.Context, req *Key) (*LRpopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpop not implemented")
}
func (*UnimplementedGameRedisServer) Lrange(ctx context.Context, req *LrangeRequest) (*LrangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lrange not implemented")
}
func (*UnimplementedGameRedisServer) Llen(ctx context.Context, req *Key) (*LlenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Llen not implemented")
}
func (*UnimplementedGameRedisServer) Sadd(ctx context.Context, req *SaddRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sadd not implemented")
}
func (*UnimplementedGameRedisServer) Srem(ctx context.Context, req *SremRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Srem not implemented")
}
func (*UnimplementedGameRedisServer) SisMember(ctx context.Context, req *SisMemberRequest) (*SisMemberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SisMember not implemented")
}
func (*UnimplementedGameRedisServer) Smembers(ctx context.Context, req *Key) (*SmembersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Smembers not implemented")
}
func (*UnimplementedGameRedisServer) Zadd(ctx context.Context, req *ZaddRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zadd not implemented")
}
func (*UnimplementedGameRedisServer) Zrem(ctx context.Context, req *ZremRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zrem not implemented")
}
func (*UnimplementedGameRedisServer) Zrank(ctx context.Context, req *ZrankRequest) (*ZrankReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zrank not implemented")
}
func (*UnimplementedGameRedisServer) ZrevRank(ctx context.Context, req *ZRevRankRequest) (*ZRevRankReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZrevRank not implemented")
}
func (*UnimplementedGameRedisServer) Zrange(ctx context.Context, req *ZRangeRequest) (*ZRangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zrange not implemented")
}
func (*UnimplementedGameRedisServer) ZrevRange(ctx context.Context, req *ZRevRangeRequest) (*ZRevRangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZrevRange not implemented")
}
func (*UnimplementedGameRedisServer) Zscore(ctx context.Context, req *ZscoreRequest) (*ZscoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zscore not implemented")
}
func (*UnimplementedGameRedisServer) Zincrby(ctx context.Context, req *ZincrbyRequest) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Zincrby not implemented")
}
func (*UnimplementedGameRedisServer) Lock(ctx context.Context, req *LockRequest) (*LockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedGameRedisServer) UnLock(ctx context.Context, req *Key) (*ErrMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLock not implemented")
}

func RegisterGameRedisServer(s *grpc.Server, srv GameRedisServer) {
	s.RegisterService(&_GameRedis_serviceDesc, srv)
}

func _GameRedis_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Expire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Expire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Expire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Expire(ctx, req.(*ExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Exists(ctx, req.(*ExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_HmSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).HmSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/HmSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).HmSet(ctx, req.(*HmSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_HmGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HmGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).HmGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/HmGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).HmGet(ctx, req.(*HmGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_HGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).HGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/HGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).HGetAll(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Hincrby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HincrbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Hincrby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Hincrby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Hincrby(ctx, req.(*HincrbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Hdel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HdelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Hdel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Hdel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Hdel(ctx, req.(*HdelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Hexists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Hexists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Hexists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Hexists(ctx, req.(*HExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Lpush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Lpush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Lpush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Lpush(ctx, req.(*LPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Lpop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Lpop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Lpop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Lpop(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Rpush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Rpush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Rpush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Rpush(ctx, req.(*RPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Rpop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Rpop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Rpop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Rpop(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Lrange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LrangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Lrange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Lrange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Lrange(ctx, req.(*LrangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Llen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Llen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Llen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Llen(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Sadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Sadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Sadd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Sadd(ctx, req.(*SaddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Srem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SremRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Srem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Srem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Srem(ctx, req.(*SremRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_SisMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SisMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).SisMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/SisMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).SisMember(ctx, req.(*SisMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Smembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Smembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Smembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Smembers(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Zadd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZaddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Zadd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Zadd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Zadd(ctx, req.(*ZaddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Zrem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZremRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Zrem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Zrem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Zrem(ctx, req.(*ZremRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Zrank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZrankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Zrank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Zrank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Zrank(ctx, req.(*ZrankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_ZrevRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).ZrevRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/ZrevRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).ZrevRank(ctx, req.(*ZRevRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Zrange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Zrange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Zrange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Zrange(ctx, req.(*ZRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_ZrevRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZRevRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).ZrevRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/ZrevRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).ZrevRange(ctx, req.(*ZRevRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Zscore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZscoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Zscore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Zscore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Zscore(ctx, req.(*ZscoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Zincrby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZincrbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Zincrby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Zincrby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Zincrby(ctx, req.(*ZincrbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameRedis_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRedisServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameRedis/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRedisServer).UnLock(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

var _GameRedis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameRedis",
	HandlerType: (*GameRedisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Del",
			Handler:    _GameRedis_Del_Handler,
		},
		{
			MethodName: "Expire",
			Handler:    _GameRedis_Expire_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _GameRedis_Exists_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _GameRedis_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GameRedis_Get_Handler,
		},
		{
			MethodName: "HmSet",
			Handler:    _GameRedis_HmSet_Handler,
		},
		{
			MethodName: "HmGet",
			Handler:    _GameRedis_HmGet_Handler,
		},
		{
			MethodName: "HGetAll",
			Handler:    _GameRedis_HGetAll_Handler,
		},
		{
			MethodName: "Hincrby",
			Handler:    _GameRedis_Hincrby_Handler,
		},
		{
			MethodName: "Hdel",
			Handler:    _GameRedis_Hdel_Handler,
		},
		{
			MethodName: "Hexists",
			Handler:    _GameRedis_Hexists_Handler,
		},
		{
			MethodName: "Lpush",
			Handler:    _GameRedis_Lpush_Handler,
		},
		{
			MethodName: "Lpop",
			Handler:    _GameRedis_Lpop_Handler,
		},
		{
			MethodName: "Rpush",
			Handler:    _GameRedis_Rpush_Handler,
		},
		{
			MethodName: "Rpop",
			Handler:    _GameRedis_Rpop_Handler,
		},
		{
			MethodName: "Lrange",
			Handler:    _GameRedis_Lrange_Handler,
		},
		{
			MethodName: "Llen",
			Handler:    _GameRedis_Llen_Handler,
		},
		{
			MethodName: "Sadd",
			Handler:    _GameRedis_Sadd_Handler,
		},
		{
			MethodName: "Srem",
			Handler:    _GameRedis_Srem_Handler,
		},
		{
			MethodName: "SisMember",
			Handler:    _GameRedis_SisMember_Handler,
		},
		{
			MethodName: "Smembers",
			Handler:    _GameRedis_Smembers_Handler,
		},
		{
			MethodName: "Zadd",
			Handler:    _GameRedis_Zadd_Handler,
		},
		{
			MethodName: "zrem",
			Handler:    _GameRedis_Zrem_Handler,
		},
		{
			MethodName: "zrank",
			Handler:    _GameRedis_Zrank_Handler,
		},
		{
			MethodName: "ZrevRank",
			Handler:    _GameRedis_ZrevRank_Handler,
		},
		{
			MethodName: "Zrange",
			Handler:    _GameRedis_Zrange_Handler,
		},
		{
			MethodName: "ZrevRange",
			Handler:    _GameRedis_ZrevRange_Handler,
		},
		{
			MethodName: "Zscore",
			Handler:    _GameRedis_Zscore_Handler,
		},
		{
			MethodName: "Zincrby",
			Handler:    _GameRedis_Zincrby_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _GameRedis_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _GameRedis_UnLock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game-redis.proto",
}
